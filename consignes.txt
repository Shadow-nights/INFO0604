Projet SUDOKU
Solveur de Sudoku parallélisé sur le CPU
Objectif
Vous avez le droit d'implémenter un programme parallélisé qui peut résoudre efficacement un puzzle Sudoku en utilisant un algorithme de backtracking. 

Contexte
Introduction au Sudoku
Le Sudoku est un jeu de réflexion populaire qui se joue généralement sur un plateau de 9x9 cases comportant des chiffres entre 1 et 9.



Le but du jeu est de remplir la grille avec des chiffres. Cependant, chaque ligne ne peut contenir qu'un seul des chiffres compris entre 1 et 9. De même, chaque colonne et chaque sous-grille 3x3 ne peut contenir qu'un seul des chiffres compris entre 1 et 9.

Un jeu de Sudoku standard peut comporter entre 50 et 60 espaces vides à résoudre. Un algorithme de force brute aurait un espace de recherche incroyablement vaste à parcourir. En fait, la résolution d'un puzzle Sudoku est NP-complet.

Algorithme de résolution
Un algorithme couramment utilisé pour résoudre les grilles de Sudoku s'appelle le backtracking. 

Cet algorithme est essentiellement une recherche en profondeur dans l'arbre de toutes les combinaisons possibles dans l'espace vide de la grille de Sudoku. L'algorithme trouve le premier espace ouvert et y essaie le chiffre 1. Si cette grille est valide, il continue d'essayer des valeurs dans les autres espaces libres. Si la grille n'est plus valide (l'insertion ne respecte pas les règles), l'algorithme revient en arrière en annulant la dernière tentative et essaie une autre valeur à cet endroit. Si toutes les valeurs ont été essayées, il faut revenir en arrière.

Si le tableau est valide et qu'il n'y a plus d'espaces vides, la grille est résolue ! Si le retour en arrière se fait jusqu'au premier espace vide et qu'il n'y a plus de valeurs possibles, cela signifie que nous avons essayé toutes les combinaisons possibles et qu'il n'y a pas de solution. Nous pouvons illustrer ceci plus clairement avec le pseudocode de l'algorithme :


recursive_backtrack() :
    si la grille est valide :
        index = index du premier emplacement vide dans la grille
        pour valeur = 1 à 9 :
            set tableau[index] = valeur
            si recursive_backtrack() :
                return true ; // résolu !
            set tableau[index] = 0
    // si nous avons essayé toutes les valeurs, ou si le tableau n'est pas valide, retour en arrière
    retourner faux ;
Défis de parallélisation
À première vue, cet algorithme qui fait la recherche en profondeur en premier (Depth-first search - DFS),ne semble pas être très parallélisable. En effet, l'algorithme dépend d'une pile. Dans le cas récursif, la pile est implicite par l'enchaînement des appels de fonction. Les piles sont difficiles à paralléliser parce que les threads ne peuvent pas tous travailler à partir de la même pile et avancer ensemble de manière productive sans créer une très forte concurrence pour l'accès à la pile.

Parallélisation sur différentes branches de la recherche en profondeur
Une approche pour paralléliser le solveur consiste à modifier la recherche en profondeur de manière à ce que les threads puissent fonctionner de manière indépendante sans lire tous à partir de la même pile. Sans cette contrainte, la recherche en profondeur est facile à paralléliser. Nous pouvons par exemple commencer par trouver toutes les grilles valides possibles qui remplissent les 20 premiers espaces vides d'un puzzle donné. Cela peut nous donner quelque chose comme des milliers de grilles possibles. Ces grilles peuvent ensuite être transmis à traités en parallèle, où chaque thread applique l'algorithme de backtracking à sa propre grille. Si un thread trouve une solution, tous les threads s'arrêtent, et cette solution est renvoyée au au "main".

Code séquentiel de référence
Si vous n'avez pas un code séquentiel de référence (certains ont déjà implementé des solveurs sudoku), vous pouvez vous inspirer des codes ci-dessous : 

https://www.geeksforgeeks.org/sudoku-backtracking-7/

Bien sûr, adaptez ce code à vos besoins (ex : lecture de plusieurs grilles en entrée)

Autres consignes
Entrées et sorties
Même en "force brute", la résolution d'une seule grille Sudoku ne prend pas beaucoup de temps. Afin de pouvoir mesurer vos gains de performance, il est fortement conseillé de charger plusieurs grilles simultanément (100 ?). Ça vous donne également l'opportunité de tester d'autres moyens de parallélisation "gros grain" : pool de workers, tâches...

Langages et bibliothèques
Vous avez le choix parmi les langages (C, Python) et bibliothèques vues jusqu'à présent (PThreads, Threading, Multiprocessing, OpenMP, MPI). Un point de bonus peut être accordé à ceux qui comparent deux implémentation ou font une implémentation mixte (ex : MPI + OpenMP)

Comment mesurer le temps
En plus des méthodes simples de mesure du temps (appel "time" dans le shell, ou avec la bibliothèque Time C), MPI et OpenMP offrent leurs fonctions avec un certain nombre d'avantages (voir un article blog ici). Ces fonctions peuvent être intéressantes pour comparer le temps dans les parties séquentielles et parallèles de vos codes (pour calculer le speedup, par exemple).

https://rookiehpc.org/mpi/docs/mpi_wtime/index.html

https://gcc.gnu.org/onlinedocs/gcc-4.5.4/libgomp/omp_005fget_005fwtime.html



Rapport et code source
Bien évidemment, vous devez rendre votre code source (tous les fichiers dans un fichier zip). 

Le rapport, à rendre en format PDF, doit inclure : 

Le nom des membres du groupe (min 3, max 5 personnes)
Un résumé  (1-3 phrases)
Fournir un bref résumé du projet, indiquant votre stratégie
Informations générales 
Fournir des informations de base sur votre projet
Expliquer le projet en détail, vos choix et vos stratégies
Questions (1-3 paragraphes)
Quels sont les défis à relever ?
Quels sont les problèmes à résoudre ou ceux qui vous avez rencontré ?
Quels sont les résultats que vous espérez obtenir (avant démarrer la parallélisation de votre code) ?  
Résultats
Comment compiler et lancer votre code. N'oubliez pas de fournir des instructions pour le format des grilles d'entrée (ou fournissez un fichier d'exemple ou code générateur de grilles)
Décrivez les résultats obtenus. Décrivez également l'environnement d'exécution (type de machines, nombre de coeurs, etc.)
Utilisez des tableaux ou graphiques pour comparer vos performances avec un algo séquentiel. Essayez de calculer votre speedup et vérifier s'il est "linéaire, supra-linéaire ou asymptotique").
Êtes-vous contents de vos résultats ? S'il fallait récommencer, quels seraient vos choix pour une nouvelle version ? 
Décrivez également comment le travail a été réparti entre les membres du groupe. 



